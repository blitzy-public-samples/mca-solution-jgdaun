# Development Environment Deployment Workflow
# Version: 1.0.0
# This workflow implements automated deployment to the development environment
# with comprehensive testing, security checks, and health monitoring.

name: Deploy to Development

on:
  # Trigger deployment on merge to develop branch
  push:
    branches: [ develop ]
  # Allow manual triggers for specific deployments
  workflow_dispatch:

# Environment variables
env:
  AWS_REGION: us-east-2  # Development region from infrastructure.deployment_environment
  ECR_REPOSITORY: dollar-funding-dev
  TERRAFORM_VERSION: '1.0.0'
  ENVIRONMENT: development
  DEPLOY_TIMEOUT: 300
  HEALTH_CHECK_RETRIES: 3
  HEALTH_CHECK_INTERVAL: 20

# Permissions required for deployment
permissions:
  id-token: write
  contents: read

jobs:
  # Verify CI workflows completed successfully
  verify-ci:
    name: Verify CI Status
    runs-on: ubuntu-latest
    steps:
      - name: Check Backend CI Status
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'backend-ci.yml',
              branch: context.ref,
              status: 'completed',
              per_page: 1
            });
            if (data.workflow_runs[0]?.conclusion !== 'success') {
              core.setFailed('Backend CI must complete successfully before deployment');
            }

      - name: Check Frontend CI Status
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'frontend-ci.yml',
              branch: context.ref,
              status: 'completed',
              per_page: 1
            });
            if (data.workflow_runs[0]?.conclusion !== 'success') {
              core.setFailed('Frontend CI must complete successfully before deployment');
            }

  # Security scanning before deployment
  security-check:
    name: Security Scan
    needs: verify-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2 # v2

      - name: Run Security Scan
        uses: snyk/actions/python@v1 # v1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Infrastructure deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: security-check
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2 # v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1 # v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1 # v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Initialize Terraform
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init

      - name: Plan Terraform Changes
        id: plan
        run: |
          cd infrastructure/terraform/environments/dev
          terraform plan -out=tfplan

      - name: Apply Terraform Changes
        run: |
          cd infrastructure/terraform/environments/dev
          terraform apply -auto-approve tfplan

  # Application deployment
  deploy-application:
    name: Deploy Application
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2 # v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1 # v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 # v1

      - name: Build and Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG ./src/backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/backend:$IMAGE_TAG

      - name: Build and Push Frontend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG ./src/web
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/frontend:$IMAGE_TAG

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1 # v1
        with:
          task-definition: infrastructure/ecs/task-definition.json
          service: dollar-funding-dev
          cluster: dollar-funding-dev
          wait-for-service-stability: true
          force-new-deployment: true

  # Post-deployment health checks
  health-check:
    name: Health Checks
    needs: deploy-application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2 # v2

      - name: Run Health Checks
        run: |
          chmod +x infrastructure/scripts/health-check.sh
          ./infrastructure/scripts/health-check.sh \
            --environment development \
            --retries ${{ env.HEALTH_CHECK_RETRIES }} \
            --interval ${{ env.HEALTH_CHECK_INTERVAL }}

  # Deployment status notification
  notify:
    name: Notify Deployment Status
    needs: [deploy-application, health-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy-application.result == 'success' && needs.health-check.result == 'success'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Development deployment completed successfully"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Failure
        if: needs.deploy-application.result == 'failure' || needs.health-check.result == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "❌ Development deployment failed. Please check the logs."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}